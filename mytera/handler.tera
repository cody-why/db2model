use axum::response::IntoResponse;
use axum::routing::post;
use axum::Router;

use crate::common::*;
use crate::service::{{ table.table_name | lower }}_service;
use crate::vo::{{ table.table_name | lower }}_vo::*;
use crate::Json;

pub fn router<S>() -> Router<S>
where
    S: Clone + Send + Sync + 'static,
{
    Router::new()
        .route("/{{ table.table_name | lower }}/list", post(list))
        .route("/{{ table.table_name | lower }}", post(create).put(update).delete(delete))
}

/// List
#[utoipa::path(
    post,
    tag = "{{ table.table_name | lower }}",
    path = "/admin/{{ table.table_name | lower }}/list",
    request_body = {{ table.struct_name }}ListReq,
    security(("token"=[])),
    responses(
        (status = 200, description = "{code: 0, data: [{{ table.struct_name }}Vo], msg: 'Success'}", body = Response<Page<{{ table.struct_name }}Vo>>),
    )
)]
pub async fn list(Json(item): Json<{{ table.struct_name }}ListReq>) -> impl IntoResponse {
    let result = {{ table.table_name | lower }}_service::list(item).await;
    PageResponse::from(result)
}

/// Create
#[utoipa::path(
    post,
    tag = "{{ table.table_name | lower }}",
    path = "/admin/{{ table.table_name | lower }}",
    request_body = {{ table.struct_name }}CreateReq,
    security(("token"=[])),
    responses(
        (status = 200, description = "{code: 0, data: rows_affected, msg: 'Success'}", body = Response<u64>),
    )
)]
pub async fn create(Json(item): Json<{{ table.struct_name }}CreateReq>) -> impl IntoResponse {
    let result = {{ table.table_name | lower }}_service::create(item).await;
    Response::from(result)
}

/// Update
#[utoipa::path(
    put,
    tag = "{{ table.table_name | lower }}",
    path = "/admin/{{ table.table_name | lower }}",
    request_body = {{ table.struct_name }}UpdateReq,
    security(("token"=[])),
    responses(
        (status = 200, description = "{code: 0, data: rows_affected, msg: 'Success'}", body = Response<u64>),
    )
)]
pub async fn update(Json(item): Json<{{ table.struct_name }}UpdateReq>) -> impl IntoResponse {
    let result = {{ table.table_name | lower }}_service::update(item).await;
    Response::from(result)
}

/// Delete
#[utoipa::path(
    delete,
    tag = "{{ table.table_name | lower }}",
    path = "/admin/{{ table.table_name | lower }}",
    request_body = {{ table.struct_name }}DeleteReq,
    security(("token"=[])),
    responses(
        (status = 200, description = "{code: 0, data: rows_affected, msg: 'Success'}", body = Response<u64>),
    )
)]
pub async fn delete(Json(item): Json<{{ table.struct_name }}DeleteReq>) -> impl IntoResponse {
    let result = {{ table.table_name | lower }}_service::delete(item).await;
    Response::from(result)
}
