use rbatis::Page;
use rbatis::PageRequest;
use validator::Validate;

use crate::model::{{ table.table_name | lower }}::{{ table.struct_name }};
use crate::pool;
use crate::vo::{{ table.table_name | lower }}_vo::*;
use crate::{Result, Error};

/// List page
pub async fn list(item: {{ table.struct_name }}ListReq) -> Result<Page<{{ table.struct_name }}Vo>> {
    item.validate()?;
    let rb = pool!();
    let page_req = PageRequest::new(item.page_no.unwrap_or(1), item.page_size.unwrap_or(1000));
    let item = item.into();
    let result = {{ table.struct_name }}::select_page_by_req(rb, &page_req, &item).await?;
    let page = Page::<{{ table.struct_name }}Vo>::from(result);
    
    Ok(page)
}

/// Create
pub async fn create(item: {{ table.struct_name }}CreateReq) -> Result<u64> {
    item.validate()?;
    let rb = pool!();

    let {{ table.table_name | lower }} = {{ table.struct_name }}::from(item);
    let result = {{ table.struct_name }}::insert(rb, &{{ table.table_name | lower }}).await?;
    if result.rows_affected == 0 {
        return Error::e("Add failed");
    }
    Ok(result.rows_affected)
}

/// Update
pub async fn update(item: {{ table.struct_name }}UpdateReq) -> Result<u64> {
    item.validate()?;
    let rb = pool!();
    let {{ table.table_name | lower }} = {{ table.struct_name }}::from(item);
    let result = {{ table.struct_name }}::update_by_column(rb, &{{ table.table_name | lower }}, "id").await?;
    if result.rows_affected == 0 {
        return Error::e("Update failed");
    }
    Ok(result.rows_affected)
}

/// Delete
pub async fn delete(item: {{ table.struct_name }}DeleteReq) -> Result<u64> {
    item.validate()?;
    let rb = pool!();

    let result = {{ table.struct_name }}::delete_in_column(rb, "id", &item.ids).await?;
    if result.rows_affected == 0 {
        return Error::e("Delete failed");
    }
    Ok(result.rows_affected)
}
